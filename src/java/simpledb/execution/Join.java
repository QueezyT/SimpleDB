package simpledb.execution;

import simpledb.transaction.TransactionAbortedException;
import simpledb.common.DbException;
import simpledb.storage.Tuple;
import simpledb.storage.TupleDesc;

import java.io.IOException;
import java.util.*;

/**
 * The Join operator implements the relational join operation.
 */

/*
* rewind(C程序中的库函数) - 百度百科
C 程序中的库函数，功能是将文件内部的指针重新指向一个流的开头
* */


//将两条记录按条件join，基于JoinPredicate比较

//同样实现了Operator接口。实现连接操作（自然连接），
// 给定两组tuples对这两组tuples中满足JoinPredicate操作的两个tuple进行连接。
// 连接方式采用嵌套-循环连接
public class Join extends Operator {
    private static final long serialVersionUID = 1L;

    private JoinPredicate p;
    private OpIterator child1;//用于连接的left tuples
    private OpIterator child2;//用于连接的right tuples
    private Tuple t; //fetchNext（）方法每次获得一个连接后的结果，用嵌套循环每次选择child中的一个left 依次 与child2中符合条件的 right 进行连接，
    // 将child2中的所有tuples比较完之后，left = child1.next()， child2.rewind()

    /**
     * Constructor. Accepts two children to join and the predicate to join them
     * on
     *
     * @param p
     *            The predicate to use to join the children
     * @param child1
     *            Iterator for the left(outer) relation to join
     * @param child2
     *            Iterator for the right(inner) relation to join
     */
    public Join(JoinPredicate p, OpIterator child1, OpIterator child2) {
        // some code goes here
        this.p = p;
        this.child1 = child1;
        this.child2 = child2;
        t = null;
    }

    //返回joinPredicate
    public JoinPredicate getJoinPredicate() {
        // some code goes here
        return p;
    }

    /**
     * @return
     *       the field name of join field1. Should be quantified by
     *       alias or table name.
     * */
    //left tuple中进行比较的字段的名字
    public String getJoinField1Name() {
        // some code goes here
        return child1.getTupleDesc().getFieldName(p.getField1());
    }

    /**
     * @return
     *       the field name of join field2. Should be quantified by
     *       alias or table name.
     * */
    //right tuple中进行比较的字段的名字
    public String getJoinField2Name() {
        // some code goes here
        return child2.getTupleDesc().getFieldName(p.getField2());
    }

    //TupleDesc中的merge操作，返回连接后的tuple的属性
    public TupleDesc getTupleDesc() {
        // some code goes here
        return TupleDesc.merge(child1.getTupleDesc(),child2.getTupleDesc());
    }


    public void open() throws DbException, NoSuchElementException,
            TransactionAbortedException, IOException {
        // some code goes here
        child1.open();
        child2.open();
        super.open();
    }

    public void close() {
        // some code goes here
        super.close();
        child2.close();
        child1.close();
    }

    /*
    * rewind(C程序中的库函数) - 百度百科
    C 程序中的库函数，功能是将文件内部的指针重新指向一个流的开头
    * */
    public void rewind() throws DbException, TransactionAbortedException, IOException {
        // some code goes here
        child1.rewind();
        child2.rewind();
    }

    /**
     * Returns the next tuple generated by the join, or null if there are no
     * more tuples. Logically, this is the next tuple in r1 cross r2 that
     * satisfies the join predicate. There are many possible implementations;
     * the simplest is a nested loops join.
     * <p>
     * Note that the tuples returned from this particular implementation of Join
     * are simply the concatenation of joining tuples from the left and right
     * relation. Therefore, if an equality predicate is used there will be two
     * copies of the join attribute in the results. (Removing such duplicate
     * columns can be done with an additional projection operator if needed.)
     * <p>
     * For example, if one tuple is {1,2,3} and the other tuple is {1,5,6},
     * joined on equality of the first column, then this returns {1,2,3,1,5,6}.
     *
     * @return The next matching tuple.
     * @see JoinPredicate#filter
     */
    /*先获取child1中的一个tuple 赋值给left，
    left依次与child2中的tuples进行比较，
    与满足连接条件的 right 进行连接并返回连接后的tuple，
    遍历完child2之后，left = child1.next()， child2.rewind()*/

    /*
    * rewind(C程序中的库函数) - 百度百科
    C 程序中的库函数，功能是将文件内部的指针重新指向一个流的开头
    * */
    protected Tuple fetchNext() throws TransactionAbortedException, DbException, IOException {
        // some code goes here
        while(this.child1.hasNext() || this.t != null){
            if(this.child1.hasNext() && this.t == null){
                // t 的意义就是 笛卡尔积, 一个可能对多个相等
                t = child1.next();
            }
            while(child2.hasNext()){
                Tuple t2 = child2.next();
                if(p.filter(t,t2)){
                    TupleDesc td1 = t.getTupleDesc();
                    TupleDesc td2 = t2.getTupleDesc();
                    TupleDesc newTd = TupleDesc.merge(td1,td2);
                    Tuple newTuple = new Tuple(newTd);
                    newTuple.setRecordId(t.getRecordId());
                    int i=0;
                    for(;i<td1.numFields();++i)
                        newTuple.setField(i,t.getField(i));
                    for(int j=0;j<td2.numFields();++j)
                        newTuple.setField(i+j,t2.getField(j));
                    if(!child2.hasNext()){
                        child2.rewind();
                        t = null;
                    }
                    return newTuple;
                }
            }
     /*
    * rewind(C程序中的库函数) - 百度百科
    C 程序中的库函数，功能是将文件内部的指针重新指向一个流的开头
    * */
            child2.rewind();
            t = null;
        }
        return null;
    }

    @Override
    public OpIterator[] getChildren() {
        // some code goes here
        return new OpIterator[] {child1,child2};
    }

    @Override
    public void setChildren(OpIterator[] children) {
        // some code goes here
        child1 = children[0];
        child2 = children[1];
    }


}
